{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/api.ts","webpack:///./src/components/ErrorDialog/index.tsx","webpack:///./src/components/LoginEntranceFormFieldGroup/LoginEntranceFormFieldGroup.css?7a7f","webpack:///./src/components/LoginEntranceFormFieldGroup/index.tsx","webpack:///./src/constants.ts","webpack:///./src/containers/App/App.css?5ac7","webpack:///./src/containers/App/index.tsx","webpack:///./src/containers/Entrance/Entrance.css?31f4","webpack:///./src/containers/Entrance/index.tsx","webpack:///./src/containers/IframePage/IframePage.css?7164","webpack:///./src/containers/IframePage/index.tsx","webpack:///./src/containers/Login/Login.css?83e3","webpack:///./src/containers/Login/index.tsx","webpack:///./src/index.css?c40d","webpack:///./src/index.tsx","webpack:///./src/lib/ls-conf-sdk.js","webpack:///./src/middleware.ts","webpack:///./src/slice.ts"],"names":[],"mappings":";QAAA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA,QAAQ,oBAAoB;QAC5B;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA,iBAAiB,4BAA4B;QAC7C;QACA;QACA,kBAAkB,2BAA2B;QAC7C;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;;QAEA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;QAEA;QACA;QACA;QACA;QACA,gBAAgB,uBAAuB;QACvC;;;QAGA;QACA;QACA;QACA;;;;;;;;;;;;;;;;;;;;;;;;ACvJA;AAAA;AAAA;AAAA;AACuC;AACvC,qBAAqB,mCAAmC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,mDAAQ;AACzC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,2CAA2C,kHAAkH;AAC7J;AACA;AACA,2CAA2C,6FAA6F;AACxI;AACA;AACA,2CAA2C,oEAAoE;AAC/G;AACA;AACA,2CAA2C,+CA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AA0C,iBAAiB,EAAE,gBAAgB,EAAE;AAC/E,uCAAuC,iBAAiB,EAAE,gBAAgB,EAAE;AAC5E,4CAA4C,iBAAiB,EAAE,gBAAgB,EAAE;AACjF,2CAA2C,iBAAiB,EAAE,gBAAgB,EAAE;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,kBAAkB,UAAU,kBAAkB,WAAW,mBAAmB,iBAAiB,WAAW;AACpJ;AACA;AACA;AACA;AACA,4EAA4E,UAAU,wBAAwB,EAAE;AAChH;AACA;AACA;AACA,uEAAuE,UAAU,wBAAwB,EAAE;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,eAAe;AACxC,kEAAkE,UAAU,eAAe,EAAE;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,oBAAoB;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,uBAAuB,UAAU,uBAAuB,WAAW,wBAAwB;AACnI;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnmBAAmB;AACnB;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,aAAa,WAAW,kBAAkB;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,mBAAO,CAAC,8CAAgB;AACzD;AACA,iCAAiC,mBAAO,CAAC,8CAAgB;AACzD,8BAA8B,0BAA0B,yBAAyB;AACjF;AACA;AACA,oEAAoE,UAAU;AAC9E;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,eAAe;AACf,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,8EAA8E,sBAAsB;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,8DAA8D;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,sBAAsB,oCAAoC,iBAAiB;AACzJ;AACA;AACA,8EAA8E,sBAAsB;AACpG;AACA;AACA,0BAA0B,uCAAuC;AACjE;AACA;AACA;AACA;AACA;AACA,iFAAiF,sBAAsB,oCAAoC,iBAAiB;AAC5J;AACA;AACA,iFAAiF,sBAAsB;AACvG;AACA;AACA,sDAAsD,WAAW;AACjE;AACA;AACA;AACA;AACA;AACA,2EAA2E,sBAAsB;AACjG;AACA;AACA;AACA;AACA,kCAAkC,oBAAoB;AACtD;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,yFAAyF,sBAAsB,oCAAoC,iBAAiB;AACpK;AACA;AACA,yFAAyF,sBAAsB;AAC/G;AACA;AACA,0BAA0B,uCAAuC;AACjE;AACA;AACA;AACA;AACA;AACA,4FAA4F,sBAAsB,oCAAoC,iBAAiB;AACvK;AACA;AACA,4FAA4F,sBAAsB;AAClH;AACA;AACA,sDAAsD,WAAW;AACjE;AACA;AACA;AACA;AACA;AACA,sFAAsF,sBAAsB;AAC5G;AACA;AACA;AACA;AACA,kCAAkC,oBAAoB;AACtD;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;;AAEA,CAAC;;;;;;;;;;;;;ACprDD;AAAA;AAAwD;AACxD;AACA,OAAO,6EAAoB;AAC3B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACe,yEAAU,EAAC;;;;;;;;;;;;;ACf1B;AAAA;AAA+C;AAC/C;AACA,kBAAkB,oEAAW;AAC7B;AACA;AACA,gBAAgB;AAChB,CAAC;AACD,UAAU,UAAU;AACpB,kBAAkB;AAClB;AACe,wEAAS,EAAC","file":"js/main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"main\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([\"./src/index.tsx\",\"vendor\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","/* eslint @typescript-eslint/naming-convention: 0 */\r\nimport { API_BASE } from './constants';\r\nconst API_HEADERS = { 'Content-Type': 'application/json; charset=utf-8' };\r\nconst validateBitrateReservation = (bitrate) => {\r\n    const param = Number(bitrate);\r\n    if (!isNaN(param) && param >= 1 && param <= 250) {\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\nconst validateRoomType = (roomType) => {\r\n    if (roomType === 'sfu' || roomType === 'p2p' || roomType === 'p2p_turn') {\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\n// POST リクエストの共通ラッパー\r\nasync function fetchPost(path, body) {\r\n    const response = await fetch(API_BASE + path, {\r\n        method: 'POST',\r\n        body: JSON.stringify(body),\r\n        headers: API_HEADERS,\r\n    });\r\n    // 異常系の場合 warning をログに出して、エラーを投げて終了する。\r\n    if (!response.ok) {\r\n        const data = await response.json();\r\n        console.warn('API fetch Error, error=>', data);\r\n        const error = new Error(response.statusText);\r\n        throw error;\r\n    }\r\n    return response.json();\r\n}\r\n// Access Token の取得 API\r\nexport async function fetchAccessToken(roomId, connectionId, bitrateReservation, roomType) {\r\n    if (bitrateReservation && validateBitrateReservation(bitrateReservation) && roomType && validateRoomType(roomType)) {\r\n        return fetchPost('/access_token', { room_id: roomId, connection_id: connectionId, bitrate_reservation_mbps: bitrateReservation, room_type: roomType });\r\n    }\r\n    else if (bitrateReservation && validateBitrateReservation(bitrateReservation)) {\r\n        return fetchPost('/access_token', { room_id: roomId, connection_id: connectionId, bitrate_reservation_mbps: bitrateReservation });\r\n    }\r\n    else if (roomType && validateRoomType(roomType)) {\r\n        return fetchPost('/access_token', { room_id: roomId, connection_id: connectionId, room_type: roomType });\r\n    }\r\n    else {\r\n        return fetchPost('/access_token', { room_id: roomId, connection_id: connectionId });\r\n    }\r\n}\r\n","import '@material/dialog/dist/mdc.dialog.css';\r\nimport '@material/button/dist/mdc.button.css';\r\nimport '@material/ripple/dist/mdc.ripple.css';\r\nimport { Dialog, DialogActions, DialogButton, DialogContent } from '@rmwc/dialog';\r\nimport React from 'react';\r\nconst ErrorDialog = (props) => {\r\n    return (React.createElement(Dialog, { open: props.open },\r\n        React.createElement(DialogContent, null, props.message),\r\n        React.createElement(DialogActions, null,\r\n            React.createElement(DialogButton, { action: \"close\", isDefaultAction: true, onClick: props.onClose }, \"\\u9589\\u3058\\u308B\"))));\r\n};\r\nexport default ErrorDialog;\r\n","// extracted by mini-css-extract-plugin","import './LoginEntranceFormFieldGroup.css';\r\nimport '@material/theme/dist/mdc.theme.css';\r\nimport '@material/typography/dist/mdc.typography.css';\r\nimport '@material/card/dist/mdc.card.css';\r\nimport '@material/textfield/dist/mdc.textfield.css';\r\nimport '@material/notched-outline/dist/mdc.notched-outline.css';\r\nimport '@material/line-ripple/dist/mdc.line-ripple.css';\r\nimport '@material/floating-label/dist/mdc.floating-label.css';\r\nimport '@material/button/dist/mdc.button.css';\r\nimport { TextField } from '@rmwc/textfield';\r\nimport { ThemeProvider } from '@rmwc/theme';\r\nimport { Typography } from '@rmwc/typography';\r\nimport React, { useState } from 'react';\r\n// MWCのバグが、以下2つあるため一時的に指定している\r\n// TextFieldの色はprimary値しか受け付けない / ラベルの色はthemaやclassを使っても、強制的に#6200eeの値になる\r\n// TODO(hkt): RMWC側でバグが対応され次第削除する\r\nconst TEXTFIELD_THEME_OPTIONS = {\r\n    primary: '#6200ee',\r\n};\r\nconst ROOMID_CHARACTER_LIMIT = {\r\n    upper: 255,\r\n};\r\nconst USERNAME_CHARACTER_LIMIT = {\r\n    upper: 10,\r\n};\r\nconst validateIDString = (idString) => {\r\n    const pattern = /^[a-zA-Z0-9.%+^_\"`{|}~<>\\\\-]{1,255}$/;\r\n    return idString.match(pattern) !== null;\r\n};\r\n// username / roomId のバリデーション\r\n// TODO(kdxu): ログイン時のエラー仕様が決定したら、それを踏襲してこのロジックを修正する\r\nconst validateRoomIdAndUsername = (roomId, username) => {\r\n    const errors = [];\r\n    if (username === '') {\r\n        errors.push({ key: 'username', message: 'ユーザ名を入力してください' });\r\n    }\r\n    if (username.length > USERNAME_CHARACTER_LIMIT.upper) {\r\n        errors.push({ key: 'username', message: `ユーザ名は${USERNAME_CHARACTER_LIMIT.upper}文字以下で入力してください` });\r\n    }\r\n    if (roomId === '') {\r\n        errors.push({ key: 'roomId', message: 'ルーム名を入力してください' });\r\n    }\r\n    if (roomId.length > ROOMID_CHARACTER_LIMIT.upper) {\r\n        errors.push({ key: 'roomId', message: `ルーム名は${ROOMID_CHARACTER_LIMIT.upper}文字以下で入力してください` });\r\n    }\r\n    if (!validateIDString(roomId)) {\r\n        errors.push({ key: 'roomId', message: '英数字と一部記号（.%+^_\"`{|}~<>\\\\-）以外の文字列は使用できません' });\r\n    }\r\n    return errors;\r\n};\r\nconst LoginEntranceInputItem = (props) => {\r\n    const error = props.validateErrors.find((v) => v.key === props.name);\r\n    const helpText = error && {\r\n        persistent: true,\r\n        validationMsg: true,\r\n        children: error.message,\r\n    };\r\n    const isInvalid = error !== undefined;\r\n    const title = `${props.label}を入力してください`;\r\n    return (React.createElement(React.Fragment, null,\r\n        React.createElement(Typography, { use: \"body1\", tag: \"p\", theme: \"textSecondaryOnBackground\" }, title),\r\n        React.createElement(ThemeProvider, { options: TEXTFIELD_THEME_OPTIONS },\r\n            React.createElement(TextField, { onChange: props.onChange, style: { width: '100%' }, outlined: true, invalid: isInvalid, label: props.label, name: props.name, value: props.value, helpText: helpText }))));\r\n};\r\nconst LoginEntranceFormFieldGroup = (props) => {\r\n    const [validateErrors, setValidateResult] = useState([]);\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const errors = validateRoomIdAndUsername(props.roomId, props.username);\r\n        setValidateResult(errors);\r\n        if (errors.length > 0) {\r\n            return;\r\n        }\r\n        // validation エラーが無い場合ログイン処理を行う\r\n        props.onSubmitSuccess();\r\n    };\r\n    const handleChangeRoomId = (e) => {\r\n        e.preventDefault();\r\n        props.onChangeRoomId(e.target.value);\r\n    };\r\n    const handleChangeUsername = (e) => {\r\n        e.preventDefault();\r\n        props.onChangeUsername(e.target.value);\r\n    };\r\n    return (React.createElement(\"div\", { className: \"mdc-card\" },\r\n        React.createElement(\"div\", { className: \"join-content\" },\r\n            React.createElement(Typography, { use: \"headline6\", tag: \"h1\", theme: \"onSurface\" }, \"RICOH Live Streaming Service\"),\r\n            React.createElement(\"form\", null,\r\n                React.createElement(\"div\", { className: \"form-group\" },\r\n                    React.createElement(LoginEntranceInputItem, { onChange: handleChangeRoomId, label: \"\\u30EB\\u30FC\\u30E0\\u540D\", name: \"roomId\", value: props.roomId, validateErrors: validateErrors }),\r\n                    React.createElement(LoginEntranceInputItem, { onChange: handleChangeUsername, label: \"\\u30E6\\u30FC\\u30B6\\u540D\", name: \"username\", value: props.username, validateErrors: validateErrors })),\r\n                React.createElement(\"button\", { id: \"joinButton\", onClick: handleSubmit, className: \"mdc-button mdc-button--raised mdco-fullwidth\" },\r\n                    React.createElement(\"div\", { className: \"mdc-button__ripple\" }),\r\n                    React.createElement(\"span\", { className: \"mdc-button__label\" }, \"\\u53C2\\u52A0\"))))));\r\n};\r\nexport default LoginEntranceFormFieldGroup;\r\n","export const API_BASE = config.BACKEND_API_BASE;\r\nexport const LS_CONF_URL = config.LS_CONF_URL;\r\nexport const LS_CLIENT_ID = config.LS_CLIENT_ID;\r\nexport const SIGNALING_URL = config.LS_SIGNALING_URL;\r\nexport const THETA_ZOOM_MAX_RANGE = Number(config.THETA_ZOOM_MAX_RANGE);\r\nexport const ROOM_CONFIG = config.ROOM_CONFIG;\r\nexport const TOOLBAR_CONFIG = config.TOOLBAR_CONFIG;\r\nexport const SUBVIEW_CONFIG = config.SUBVIEW_CONFIG;\r\nexport const DEFAULT_LAYOUT = config.DEFAULT_LAYOUT;\r\nexport const POD_COORDINATES = config.POD_COORDINATES;\r\nexport const THEME_CONFIG = config.THEME_CONFIG;\r\n","// extracted by mini-css-extract-plugin","import './App.css';\r\nimport React from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport Entrance from '../Entrance';\r\nimport IframePage from '../IframePage';\r\nimport Login from '../Login';\r\nconst App = () => {\r\n    return (React.createElement(\"div\", { className: \"mdc-theme--background\" },\r\n        React.createElement(BrowserRouter, null,\r\n            React.createElement(Switch, null,\r\n                React.createElement(Route, { path: \"/\", exact: true, component: Login }),\r\n                React.createElement(Route, { path: \"/login\", exact: true, component: Login }),\r\n                React.createElement(Route, { path: \"/room/:roomId/entrance\", exact: true, component: Entrance }),\r\n                React.createElement(Route, { path: \"/room/:roomId\", exact: true, component: IframePage })))));\r\n};\r\nexport default App;\r\n","// extracted by mini-css-extract-plugin","import './Entrance.css';\r\nimport qs from 'query-string';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport LoginEntranceFormFieldGroup from '@/components/LoginEntranceFormFieldGroup';\r\nconst Entrance = () => {\r\n    const params = useParams();\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    const { video_bitrate, share_bitrate, default_layout, enable_video, enable_audio, use_dummy_device, bitrate_reservation_mbps, room_type, video_codec, is_debug } = qs.parse(window.location.search);\r\n    const [roomId, setRoomId] = useState('');\r\n    const [username, setUsername] = useState('');\r\n    const onSubmitSuccess = () => {\r\n        const encodedUsername = encodeURIComponent(username);\r\n        let uriPath = `/room/${roomId}/?username=${encodedUsername}`;\r\n        /* eslint-disable @typescript-eslint/naming-convention */\r\n        if (video_bitrate && !isNaN(Number(video_bitrate))) {\r\n            uriPath += `&video_bitrate=${video_bitrate}`;\r\n        }\r\n        if (share_bitrate && !isNaN(Number(share_bitrate))) {\r\n            uriPath += `&share_bitrate=${share_bitrate}`;\r\n        }\r\n        if (default_layout) {\r\n            uriPath += `&default_layout=${default_layout}`;\r\n        }\r\n        if (enable_video) {\r\n            uriPath += `&enable_video=${enable_video}`;\r\n        }\r\n        if (enable_audio) {\r\n            uriPath += `&enable_audio=${enable_audio}`;\r\n        }\r\n        if (use_dummy_device) {\r\n            uriPath += `&use_dummy_device=${use_dummy_device}`;\r\n        }\r\n        if (bitrate_reservation_mbps && !isNaN(Number(bitrate_reservation_mbps))) {\r\n            uriPath += `&bitrate_reservation_mbps=${bitrate_reservation_mbps}`;\r\n        }\r\n        if (room_type) {\r\n            uriPath += `&room_type=${room_type}`;\r\n        }\r\n        if (video_codec && (video_codec === 'h264' || video_codec === 'vp8' || video_codec === 'vp9' || video_codec === 'h265' || video_codec === 'av1')) {\r\n            uriPath += `&video_codec=${video_codec}`;\r\n        }\r\n        if (is_debug) {\r\n            uriPath += `&is_debug=${is_debug}`;\r\n        }\r\n        /* eslint-enable @typescript-eslint/naming-convention */\r\n        window.open(uriPath);\r\n    };\r\n    useEffect(() => {\r\n        // URL paramsの`/room/:roomId/entrance` の roomId の部分を読み込んで roomId の初期値とする\r\n        setRoomId(params.roomId);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n    return (React.createElement(\"div\", { className: \"start-layout\" },\r\n        React.createElement(LoginEntranceFormFieldGroup, { username: username, roomId: roomId, onChangeUsername: setUsername, onChangeRoomId: setRoomId, onSubmitSuccess: onSubmitSuccess })));\r\n};\r\nexport default Entrance;\r\n","// extracted by mini-css-extract-plugin","// iframe を表示するページ\r\nimport './IframePage.css';\r\nimport format from 'date-fns/format';\r\nimport qs from 'query-string';\r\nimport React, { useLayoutEffect, useRef, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { fetchAccessToken } from '@/api';\r\nimport ErrorDialog from '@/components/ErrorDialog';\r\nimport { DEFAULT_LAYOUT, LS_CLIENT_ID, LS_CONF_URL, ROOM_CONFIG, SIGNALING_URL, SUBVIEW_CONFIG, THEME_CONFIG, THETA_ZOOM_MAX_RANGE, TOOLBAR_CONFIG } from '@/constants';\r\nimport LSConferenceIframe from '@/lib/ls-conf-sdk';\r\nconst CREATE_PARAMETERS = {\r\n    defaultLayout: DEFAULT_LAYOUT || undefined,\r\n    room: ROOM_CONFIG,\r\n    toolbar: TOOLBAR_CONFIG,\r\n    thetaZoomMaxRange: THETA_ZOOM_MAX_RANGE,\r\n    lsConfURL: LS_CONF_URL ? LS_CONF_URL : undefined,\r\n    subView: SUBVIEW_CONFIG,\r\n    theme: THEME_CONFIG,\r\n};\r\nconst IframePage = () => {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    const { username, video_bitrate, share_bitrate, default_layout, enable_video, enable_audio, use_dummy_device, bitrate_reservation_mbps, room_type, video_codec, is_debug } = qs.parse(window.location.search);\r\n    const { roomId } = useParams();\r\n    const iframeContainerRef = useRef(null);\r\n    const [lsConfIframe, setLsConfIframe] = useState(null);\r\n    const [errorMessage, setErrorMessage] = useState(null);\r\n    const showErrorDialog = errorMessage !== null;\r\n    const connectionId = uuidv4();\r\n    const bitrateReservation = bitrate_reservation_mbps && typeof bitrate_reservation_mbps === 'string' ? bitrate_reservation_mbps : undefined;\r\n    const roomType = room_type && typeof room_type === 'string' ? room_type : undefined;\r\n    const videoCodec = video_codec && (video_codec === 'h264' || video_codec === 'vp8' || video_codec === 'vp9' || video_codec === 'h265' || video_codec === 'av1') ? video_codec : undefined;\r\n    const isDebug = Boolean(is_debug && typeof is_debug === 'string' && is_debug.toLowerCase() === 'true');\r\n    const createAndConnectRoom = async () => {\r\n        if (!username || !roomId || typeof username !== 'string') {\r\n            // 現在 ls-conf-sdk への対応と同様にエラーをそのまま errorMessage に入れている\r\n            // TODO(kdxu): ls-conf-sdk のシステムエラーに対するユーザーへのメッセージが仕様として策定され次第、こちらのエラー文言も合わせて修正する\r\n            setErrorMessage('INVALID-PARAMETERS');\r\n            return;\r\n        }\r\n        if (!iframeContainerRef.current) {\r\n            // 現在 ls-conf-sdk への対応と同様にエラーをそのまま errorMessage に入れている\r\n            // TODO(kdxu): ls-conf-sdk のシステムエラーに対するユーザーへのメッセージが仕様として策定され次第、こちらのエラー文言も合わせて修正する\r\n            setErrorMessage('INVALID-IFRAME-CONTAINER');\r\n            return;\r\n        }\r\n        let iframe;\r\n        try {\r\n            // eslint-disable-next-line @typescript-eslint/naming-convention\r\n            if (default_layout && typeof default_layout === 'string' && ['gallery', 'presentation', 'fullscreen'].includes(default_layout.toLowerCase())) {\r\n                // eslint-disable-next-line @typescript-eslint/naming-convention\r\n                CREATE_PARAMETERS.defaultLayout = default_layout.toLowerCase();\r\n            }\r\n            iframe = await LSConferenceIframe.create(iframeContainerRef.current, CREATE_PARAMETERS);\r\n        }\r\n        catch (e) {\r\n            setErrorMessage(e.message);\r\n            return;\r\n        }\r\n        iframe.onShareRequested(async () => {\r\n            let screenShareAccessToken;\r\n            const screenShareConnectionId = uuidv4();\r\n            try {\r\n                screenShareAccessToken = await fetchAccessToken(roomId, screenShareConnectionId, bitrateReservation, roomType);\r\n            }\r\n            catch (e) {\r\n                setErrorMessage(e.message);\r\n                return;\r\n            }\r\n            const screenShareParameters = {\r\n                connectionId: screenShareConnectionId,\r\n                accessToken: screenShareAccessToken,\r\n            };\r\n            return screenShareParameters;\r\n        });\r\n        let accessToken;\r\n        try {\r\n            accessToken = await fetchAccessToken(roomId, connectionId, bitrateReservation, roomType);\r\n        }\r\n        catch (e) {\r\n            setErrorMessage(e.message);\r\n            return;\r\n        }\r\n        const connectOptions = {\r\n            username: username,\r\n            enableVideo: !enable_video ? false : Boolean(typeof enable_video === 'string' && enable_video.toLowerCase() === 'true'),\r\n            enableAudio: !enable_audio ? true : Boolean(typeof enable_audio === 'string' && enable_audio.toLowerCase() === 'true'),\r\n            maxVideoBitrate: Number(video_bitrate),\r\n            maxShareBitrate: Number(share_bitrate),\r\n            // eslint-disable-next-line @typescript-eslint/naming-convention\r\n            useDummyDevice: Boolean(use_dummy_device && typeof use_dummy_device === 'string' && use_dummy_device.toLowerCase() === 'true'),\r\n            signalingURL: SIGNALING_URL,\r\n            videoCodec: videoCodec,\r\n        };\r\n        iframe.addEventListener('error', async (e) => {\r\n            setErrorMessage(e.message);\r\n            let log = 'LSConfSample Log\\n\\n';\r\n            log += `******************** Error Message ********************\\n`;\r\n            log += `${e.message}\\n`;\r\n            log += `******************** ApplicationLog *******************\\n`;\r\n            // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n            log += `LSConfSample Version: v${require('../../../../frontend/package.json').version}\\n`;\r\n            log += `LSConfURL: ${LS_CONF_URL || 'default'}\\n`;\r\n            log += `LSClientID: ${LS_CLIENT_ID || 'unknown'}\\n`;\r\n            log += `SignalingURL: ${SIGNALING_URL || 'default'}\\n`;\r\n            log += `UserAgent: ${window.navigator.userAgent}\\n`;\r\n            log += `******************** LSConfLog ++++********************\\n`;\r\n            try {\r\n                log += await iframe.getLSConfLog();\r\n            }\r\n            catch {\r\n                // ログ取得失敗時は出力ファイルに追記しない\r\n            }\r\n            if (e.error && e.error.toReportString) {\r\n                log += `******************** toReportString *******************\\n`;\r\n                log += `${e.error.toReportString}`;\r\n            }\r\n            const fileName = `ls-conf-sample_${format(new Date(), 'yyyyMMdd_HHmmss')}.log`;\r\n            const downLoadLink = document.createElement('a');\r\n            downLoadLink.download = fileName;\r\n            downLoadLink.href = URL.createObjectURL(new Blob([log], { type: 'text.plain' }));\r\n            downLoadLink.dataset.downloadurl = ['text/plain', downLoadLink.download, downLoadLink.href].join(':');\r\n            downLoadLink.click();\r\n        }, { once: false });\r\n        iframe.addEventListener('connected', () => {\r\n            console.log('connected event occurred');\r\n        });\r\n        iframe.addEventListener('disconnected', () => {\r\n            console.log('disconnected event occurred');\r\n        });\r\n        iframe.addEventListener('startRecording', async (e) => {\r\n            const targetSubview = e.detail.subView;\r\n            console.log(`startRecording: subView: ${JSON.stringify(targetSubview)}`);\r\n            try {\r\n                await iframe.addRecordingMember(targetSubview, connectionId);\r\n            }\r\n            catch (e) {\r\n                console.warn(`Failed to addRecordingMember in startRecording event. Detail: ${JSON.stringify(e.detail)}`);\r\n            }\r\n        }, { once: false });\r\n        iframe.addEventListener('stopRecording', async (e) => {\r\n            const targetSubview = e.detail.subView;\r\n            console.log(`stopRecording: subView: ${JSON.stringify(targetSubview)}`);\r\n            try {\r\n                await iframe.removeRecordingMember(targetSubview, connectionId);\r\n            }\r\n            catch (e) {\r\n                console.warn(`Failed to removeRecordingMember in stopRecording event. Detail: ${JSON.stringify(e.detail)}`);\r\n            }\r\n        }, { once: false });\r\n        try {\r\n            await iframe.join(LS_CLIENT_ID, accessToken, connectionId, connectOptions);\r\n        }\r\n        catch (e) {\r\n            if (isDebug) {\r\n                setErrorMessage(e.message);\r\n                return;\r\n            }\r\n            window.close();\r\n            return;\r\n        }\r\n        setLsConfIframe(iframe);\r\n    };\r\n    const onCloseErrorDialog = () => {\r\n        setErrorMessage(null);\r\n    };\r\n    useLayoutEffect(() => {\r\n        createAndConnectRoom();\r\n        return () => {\r\n            if (lsConfIframe) {\r\n                lsConfIframe.leave();\r\n            }\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n    return (React.createElement(React.Fragment, null,\r\n        React.createElement(\"div\", { ref: iframeContainerRef, className: \"iframe-container\" }),\r\n        React.createElement(ErrorDialog, { open: showErrorDialog, message: errorMessage, onClose: onCloseErrorDialog })));\r\n};\r\nexport default IframePage;\r\n","// extracted by mini-css-extract-plugin","import './Login.css';\r\nimport React, { useState } from 'react';\r\nimport LoginEntranceFormFieldGroup from '@/components/LoginEntranceFormFieldGroup';\r\nconst Login = () => {\r\n    const [roomId, setRoomId] = useState('');\r\n    const [username, setUsername] = useState('');\r\n    const onSubmitSuccess = () => {\r\n        const encodedUsername = encodeURIComponent(username);\r\n        window.open(`/room/${roomId}/?username=${encodedUsername}`);\r\n    };\r\n    return (React.createElement(\"div\", { className: \"start-layout\" },\r\n        React.createElement(LoginEntranceFormFieldGroup, { username: username, roomId: roomId, onChangeRoomId: setRoomId, onChangeUsername: setUsername, onSubmitSuccess: onSubmitSuccess })));\r\n};\r\nexport default Login;\r\n","// extracted by mini-css-extract-plugin","import './index.css';\r\nimport '@material/theme/dist/mdc.theme.css';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport { ThemeProvider } from '@rmwc/theme';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './containers/App';\r\nimport middleware from './middleware';\r\nimport mainSlice from './slice';\r\nconst THEME_PROVIDER_OPTIONS = {\r\n    primary: '#303030',\r\n    background: '#f7f7fa',\r\n    surface: '#fff',\r\n    onPrimary: '#fff',\r\n    secondary: '#661fff',\r\n    error: '#b00020',\r\n    onSecondary: 'rgba(255, 255, 255, 1)',\r\n    onSurface: 'rgba(0, 0, 0, 0.87)',\r\n    onError: '#fff',\r\n    textPrimaryOnBackground: 'rgba(0, 0, 0, 0.87)',\r\n    textSecondaryOnBackground: 'rgba(0, 0, 0, 0.54)',\r\n    textHintOnBackground: 'rgba(0, 0, 0, 0.38)',\r\n    textDisabledOnBackground: 'rgba(0, 0, 0, 0.38)',\r\n    textIconOnBackground: 'rgba(0, 0, 0, 0.38)',\r\n    textPrimaryOnLight: 'rgba(0, 0, 0, 0.87)',\r\n    textSecondaryOnLight: 'rgba(0, 0, 0, 0.54)',\r\n    textHintOnLight: 'rgba(0, 0, 0, 0.38)',\r\n    textDisabledOnLight: 'rgba(0, 0, 0, 0.38)',\r\n    textIconOnLight: 'rgba(0, 0, 0, 0.38)',\r\n    textPrimaryOnDark: 'white',\r\n    textSecondaryOnDark: 'rgba(255, 255, 255, 0.7)',\r\n    textHintOnDark: 'rgba(255, 255, 255, 0.5)',\r\n    textDisabledOnDark: 'rgba(255, 255, 255, 0.5)',\r\n    textIconOnDark: 'rgba(255, 255, 255, 0.5)',\r\n};\r\nconst rootElement = document.getElementById('root');\r\n// mobile で 100vh だと アドレスバーからはみでてしまうケースに対応\r\n// onload 時に innerHeight から `--vh` を計算\r\n// 参考: https://dev.to/admitkard/mobile-issue-with-100vh-height-100-100vh-3-solutions-3nae\r\ndocument.body.onload = () => {\r\n    if (rootElement) {\r\n        rootElement.style.setProperty('--vh', window.innerHeight / 100 + 'px');\r\n    }\r\n};\r\n// window.resize 時に `--vh` を再計算\r\nwindow.addEventListener('resize', () => {\r\n    // window.innerHeight の変更に追従するため、少し遅延させる\r\n    window.setTimeout(() => {\r\n        if (rootElement) {\r\n            rootElement.style.setProperty('--vh', window.innerHeight / 100 + 'px');\r\n        }\r\n    }, 300);\r\n});\r\nconst rootReducer = mainSlice.reducer;\r\n// https://redux.js.org/redux-toolkit/overview#whats-included\r\n// devTools Extention はデフォルトで ON になっている\r\nconst store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: middleware,\r\n});\r\nReactDOM.render(React.createElement(Provider, { store: store },\r\n    React.createElement(ThemeProvider, { options: THEME_PROVIDER_OPTIONS },\r\n        React.createElement(App, null))), rootElement);\r\n","/**\n * ls-conf-sdk\n * ls-conf-sdk\n * @version: 3.0.1\n **/\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.LSConferenceIframe = factory());\n}(this, (function () { 'use strict';\n\n  // LSConfの規定のイベント\n  class LSConfEvent {\n      constructor(type, eventInit) {\n          this.type = type;\n          if (type === 'error') {\n              this.event = new ErrorEvent(type, eventInit);\n          }\n          else if (eventInit) {\n              this.event = new CustomEvent(type, eventInit);\n          }\n          else {\n              this.event = new Event(type);\n          }\n      }\n  }\n  // ls-conf-sdk のバージョン\n  const LS_CONF_SDK_VERSION = '3.0.1';\n  const DEFAULT_LS_CONF_URL = `https://conf.livestreaming.mw.smart-integration.ricoh.com/${LS_CONF_SDK_VERSION}/index.html`;\n  const DEFAULT_SIGNALING_URL = 'wss://signaling.livestreaming.mw.smart-integration.ricoh.com/v1/room';\n  const DEFAULT_MAX_BITRATE = 2000;\n  const DEFAULT_USE_DUMMY_DEVICE = false;\n  const DEFAULT_VIDEO_CODEC = 'h264';\n  const DEFAULT_CREATE_TIMEOUT_MSEC = 15000;\n  const DEFAULT_JOIN_TIMEOUT_MSEC = 10000;\n  const DEFAULT_MODE = 'normal';\n  const REQUEST_ERRORS = {\n      CreateArgsInvalid: {\n          code: 4010,\n          type: 'RequestError',\n          error: 'CreateArgsInvalid',\n      },\n      JoinArgsInvalid: {\n          code: 4020,\n          type: 'RequestError',\n          error: 'JoinArgsInvalid',\n      },\n      SetArgsInvalid: {\n          code: 4030,\n          type: 'RequestError',\n          error: 'SetArgsInvalid',\n      },\n      CreateFailed: {\n          code: 4040,\n          type: 'RequestError',\n          error: 'CreateFailed',\n      },\n      CreateTimeout: {\n          code: 4041,\n          type: 'RequestError',\n          error: 'CreateTimeout',\n      },\n      JoinFailed: {\n          code: 4050,\n          type: 'RequestError',\n          error: 'JoinFailed',\n      },\n      JoinFailedTimeout: {\n          code: 4051,\n          type: 'RequestError',\n          error: 'JoinFailedTimeout',\n      },\n      CloseFailed: {\n          code: 4060,\n          type: 'RequestError',\n          error: 'CloseFailed',\n      },\n      CameraMuteFailed: {\n          code: 4070,\n          type: 'RequestError',\n          error: 'CameraMuteFailed',\n      },\n      MicMuteFailed: {\n          code: 4080,\n          type: 'RequestError',\n          error: 'MicMuteFailed',\n      },\n      ShareRequestFailed: {\n          code: 4090,\n          type: 'RequestError',\n          error: 'ShareRequestFailed',\n      },\n      GetReportFailed: {\n          code: 4100,\n          type: 'RequestError',\n          error: 'GetReportFailed',\n      },\n      GetReportError: {\n          code: 4101,\n          type: 'RequestError',\n          error: 'GetReportError',\n      },\n      ChangeLayoutFailed: {\n          code: 4110,\n          type: 'RequestError',\n          error: 'ChangeLayoutFailed',\n      },\n      GetDeviceFailed: {\n          code: 4120,\n          type: 'RequestError',\n          error: 'GetDeviceFailed',\n      },\n      GetSubViewsFailed: {\n          code: 4130,\n          type: 'RequestError',\n          error: 'GetSubViewsFailed',\n      },\n      GetSubViewsError: {\n          code: 4131,\n          type: 'RequestError',\n          error: 'GetSubViewsError',\n      },\n      GetPoVFailed: {\n          code: 4140,\n          type: 'RequestError',\n          error: 'GetPoVFailed',\n      },\n      GetPoVError: {\n          code: 4141,\n          type: 'RequestError',\n          error: 'GetPoVError',\n      },\n      GetPoVArgsInvalid: {\n          code: 4150,\n          type: 'RequestError',\n          error: 'GetPoVArgsInvalid',\n      },\n      SetPoVFailed: {\n          code: 4160,\n          type: 'RequestError',\n          error: 'SetPoVFailed',\n      },\n      SetPoVError: {\n          code: 4161,\n          type: 'RequestError',\n          error: 'SetPoVError',\n      },\n      SetPoVArgsInvalid: {\n          code: 4170,\n          type: 'RequestError',\n          error: 'SetPoVArgsInvalid',\n      },\n      ShareRequestArgsInvalid: {\n          code: 4180,\n          type: 'RequestError',\n          error: 'ShareRequestArgsInvalid',\n      },\n      HighlightArgsInvalid: {\n          code: 4190,\n          type: 'RequestError',\n          error: 'HighlightArgsInvalid',\n      },\n      HighlightFailed: {\n          code: 4200,\n          type: 'RequestError',\n          error: 'HighlightFailed',\n      },\n      HighlightError: {\n          code: 4210,\n          type: 'RequestError',\n          error: 'HighlightError',\n      },\n      AddRecordingMemberArgsInvalid: {\n          code: 4220,\n          type: 'RequestError',\n          error: 'AddRecordingMemberArgsInvalid',\n      },\n      AddRecordingMemberFailed: {\n          code: 4230,\n          type: 'RequestError',\n          error: 'AddRecordingMemberFailed',\n      },\n      AddRecordingMemberError: {\n          code: 4240,\n          type: 'RequestError',\n          error: 'AddRecordingMemberError',\n      },\n      RemoveRecordingMemberArgsInvalid: {\n          code: 4250,\n          type: 'RequestError',\n          error: 'RemoveRecordingMemberArgsInvalid',\n      },\n      RemoveRecordingMemberFailed: {\n          code: 4260,\n          type: 'RequestError',\n          error: 'RemoveRecordingMemberFailed',\n      },\n      RemoveRecordingMemberError: {\n          code: 4270,\n          type: 'RequestError',\n          error: 'RemoveRecordingMemberError',\n      },\n      SetCameraDeviceFailed: {\n          code: 4280,\n          type: 'RequestError',\n          error: 'SetCameraDeviceFailed',\n      },\n      SetMicDeviceFailed: {\n          code: 4290,\n          type: 'RequestError',\n          error: 'SetMicDeviceFailed',\n      },\n      GetMediaDevicesFailed: {\n          code: 4300,\n          type: 'RequestError',\n          error: 'GetMediaDevicesFailed',\n      },\n      GetMediaDevicesError: {\n          code: 4310,\n          type: 'RequestError',\n          error: 'GetMediaDevicesError',\n      },\n      GetCaptureImageFailed: {\n          code: 4320,\n          type: 'RequestError',\n          error: 'GetCaptureImageFailed',\n      },\n      GetCaptureImageError: {\n          code: 4330,\n          type: 'RequestError',\n          error: 'GetCaptureImageError',\n      },\n      GetCaptureImageErrorCameraMuted: {\n          code: 4331,\n          type: 'RequestError',\n          error: 'GetCaptureImageErrorCameraMuted',\n      },\n      GetCaptureImageArgsInvalid: {\n          code: 4340,\n          type: 'RequestError',\n          error: 'GetCaptureImageArgsInvalid',\n      },\n      StartRecordingFailed: {\n          code: 4350,\n          type: 'RequestError',\n          error: 'StartRecordingFailed',\n      },\n      StartReceiveVideoFailed: {\n          code: 4360,\n          type: 'RequestError',\n          error: 'StartReceiveVideoFailed',\n      },\n      StartReceiveVideoError: {\n          code: 4370,\n          type: 'RequestError',\n          error: 'StartReceiveVideoError',\n      },\n      StartReceiveVideoArgsInvalid: {\n          code: 4380,\n          type: 'RequestError',\n          error: 'StartReceiveVideoArgsInvalid',\n      },\n      StopReceiveVideoFailed: {\n          code: 4390,\n          type: 'RequestError',\n          error: 'StopReceiveVideoFailed',\n      },\n      StopReceiveVideoError: {\n          code: 4400,\n          type: 'RequestError',\n          error: 'StopReceiveVideoError',\n      },\n      StopReceiveVideoArgsInvalid: {\n          code: 4410,\n          type: 'RequestError',\n          error: 'StopReceiveVideoArgsInvalid',\n      },\n      GetLSConfLogFailed: {\n          code: 4420,\n          type: 'RequestError',\n          error: 'GetLSConfLogFailed',\n      },\n      GetLSConfLogError: {\n          code: 4430,\n          type: 'RequestError',\n          error: 'GetLSConfLogError',\n      },\n      EnablePointerFailed: {\n          code: 4440,\n          type: 'RequestError',\n          error: 'EnablePointerFailed',\n      },\n      UpdatePointerArgsInvalid: {\n          code: 4450,\n          type: 'RequestError',\n          error: 'UpdatePointerArgsInvalid',\n      },\n      UpdatePointerFailed: {\n          code: 4460,\n          type: 'RequestError',\n          error: 'UpdatePointerFailed',\n      },\n      UpdatePointerError: {\n          code: 4470,\n          type: 'RequestError',\n          error: 'UpdatePointerError',\n      },\n      ModeInvalid: {\n          code: 4480,\n          type: 'RequestError',\n          error: 'ModeInvalid',\n      },\n      ChangeLayoutArgsInvalid: {\n          code: 4490,\n          type: 'RequestError',\n          error: 'ChangeLayoutArgsInvalid',\n      },\n  };\n  const INTERNAL_ERRORS = {\n      InternalError5001: {\n          code: 5001,\n          type: 'InternalError',\n          error: 'InternalError5001',\n      },\n      InternalError5002: {\n          code: 5002,\n          type: 'InternalError',\n          error: 'InternalError5002',\n      },\n  };\n  class LSConferenceIframeError extends Error {\n      constructor(errorDetail) {\n          super(errorDetail.error);\n          this.detail = errorDetail;\n      }\n  }\n  class LSConferenceIframe {\n      constructor(parentElement) {\n          this.logCallbacks = new Map();\n          this.parentElement = parentElement;\n          this.iframeElement = document.createElement('iframe');\n          this.lsConfURL = DEFAULT_LS_CONF_URL;\n          this.iframeElement.src = DEFAULT_LS_CONF_URL;\n          this.clientId = null;\n          this.connectOptions = null;\n          this.state = 'idle';\n          this.shareRequestedCallback = () => { };\n          this.joinCallback = { success: () => { }, error: () => { }, accepted: () => { } };\n          this.getSubViewsCallback = { success: () => { }, error: () => { } };\n          this.highlightCallback = { success: () => { }, error: () => { } };\n          this.getPoVCallback = { success: () => { }, error: () => { } };\n          this.setPoVCallback = { success: () => { }, error: () => { } };\n          this.addRecordingMemberCallback = { success: () => { }, error: () => { } };\n          this.removeRecordingMemberCallback = { success: () => { }, error: () => { } };\n          this.getMediaDevicesCallback = { success: () => { }, error: () => { } };\n          this.updatePointerCallback = { success: () => { }, error: () => { } };\n          this.getCaptureImageCallback = { success: () => { }, error: () => { } };\n          this.getLSConfLogCallback = { success: () => { }, error: () => { } };\n          this.startReceiveVideoCallback = { success: () => { }, error: () => { } };\n          this.stopReceiveVideoCallback = { success: () => { }, error: () => { } };\n          this.eventListeners = new Map();\n          this.applicationEventListeners = new Map();\n      }\n      setWindowMessageCallback() {\n          window.addEventListener('message', async (event) => {\n              const data = event.data;\n              if (!this.iframeElement.contentWindow) {\n                  throw new LSConferenceIframeError(INTERNAL_ERRORS['InternalError5001']);\n              }\n              if (data.type === 'shareRequest' && this.connectOptions) {\n                  let shareParams = undefined;\n                  try {\n                      shareParams = await this.shareRequestedCallback();\n                  }\n                  catch (e) {\n                      console.warn('Exception occurred in onShareRequested.', e);\n                  }\n                  if (!shareParams || !this.validateScreenShareParameters(shareParams)) {\n                      const error = new LSConferenceIframeError(REQUEST_ERRORS['ShareRequestArgsInvalid']);\n                      this.dispatchEvent(new LSConfEvent('error', error));\n                      throw error;\n                  }\n                  // screen share の role, mediaType は固定\n                  const postMessageParameters = {\n                      type: 'connectShare',\n                      clientId: this.clientId,\n                      accessToken: shareParams.accessToken,\n                      connectionId: shareParams.connectionId,\n                      role: 'sendonly',\n                      mediaType: 'screenshare',\n                      connectOptions: this.connectOptions,\n                  };\n                  if (!this.iframeElement.contentWindow) {\n                      throw new LSConferenceIframeError(INTERNAL_ERRORS['InternalError5001']);\n                  }\n                  try {\n                      this.iframeElement.contentWindow.postMessage(postMessageParameters, this.lsConfURL);\n                  }\n                  catch (e) {\n                      const error = new LSConferenceIframeError(REQUEST_ERRORS['ShareRequestFailed']);\n                      this.dispatchEvent(new LSConfEvent('error', error));\n                      throw error;\n                  }\n              }\n              else if (data.type === 'log') {\n                  const callback = this.logCallbacks.get(data.logType);\n                  if (callback) {\n                      if (data.error) {\n                          const error = new LSConferenceIframeError(REQUEST_ERRORS['GetReportError']);\n                          callback.error(error);\n                      }\n                      else {\n                          callback.success(data.log);\n                      }\n                      this.logCallbacks.delete(data.logType);\n                  }\n              }\n              else if (data.type === 'recording') {\n                  if (data.error) {\n                      throw new LSConferenceIframeError(INTERNAL_ERRORS['InternalError5002']);\n                  }\n              }\n              else if (data.type === 'startRecording') {\n                  if (data.error) {\n                      const error = new LSConferenceIframeError(REQUEST_ERRORS['StartRecordingFailed']);\n                      const eventInitDict = {\n                          error: error,\n                          message: `code: ${error.detail.code}, type: ${error.detail.type}, error: ${error.detail.error}, description: ${data.error}`,\n                      };\n                      this.dispatchEvent(new LSConfEvent('error', eventInitDict));\n                  }\n                  else {\n                      this.dispatchEvent(new LSConfEvent('startRecording', { detail: { subView: data.subView } }));\n                  }\n              }\n              else if (data.type === 'stopRecording') {\n                  this.dispatchEvent(new LSConfEvent('stopRecording', { detail: { subView: data.subView } }));\n              }\n              else if (data.type === 'addRecordingMember') {\n                  if (data.error) {\n                      const error = new LSConferenceIframeError(REQUEST_ERRORS['AddRecordingMemberError']);\n                      this.addRecordingMemberCallback.error(error);\n                  }\n                  else {\n                      this.addRecordingMemberCallback.success();\n                  }\n              }\n              else if (data.type === 'removeRecordingMember') {\n                  if (data.error) {\n                      const error = new LSConferenceIframeError(REQUEST_ERRORS['RemoveRecordingMemberError']);\n                      this.removeRecordingMemberCallback.error(error);\n                  }\n                  else {\n                      this.removeRecordingMemberCallback.success();\n                  }\n              }\n              else if (data.type === 'connected') {\n                  if (data.error) {\n                      this.state = 'created';\n                      const error = new LSConferenceIframeError(REQUEST_ERRORS['JoinFailed']);\n                      this.joinCallback.error(error);\n                  }\n                  else {\n                      this.state = 'open';\n                      this.joinCallback.success();\n                  }\n                  this.dispatchEvent(new LSConfEvent('connected'));\n              }\n              else if (data.type === 'connectCanceled') {\n                  this.state = 'created';\n              }\n              else if (data.type === 'connectAccepted') {\n                  if (data.error) {\n                      this.state = 'created';\n                      const error = new LSConferenceIframeError(REQUEST_ERRORS['JoinFailed']);\n                      this.joinCallback.error(error);\n                  }\n                  else {\n                      this.joinCallback.accepted();\n                  }\n              }\n              else if (data.type === 'disconnected') {\n                  this.state = 'created';\n                  this.dispatchEvent(new LSConfEvent('disconnected'));\n              }\n              else if (data.type === 'screenShareConnected') {\n                  this.dispatchEvent(new LSConfEvent('screenShareConnected'));\n              }\n              else if (data.type === 'screenShareDisconnected') {\n                  this.dispatchEvent(new LSConfEvent('screenShareDisconnected'));\n              }\n              else if (data.type === 'remoteConnectionAdded') {\n                  const event = new LSConfEvent('remoteConnectionAdded', {\n                      detail: {\n                          connectionId: data.connectionId,\n                          username: data.username,\n                          mediaType: data.mediaType,\n                          parentConnectionId: data.parentConnectionId,\n                      },\n                  });\n                  this.dispatchEvent(event);\n              }\n              else if (data.type === 'remoteConnectionRemoved') {\n                  const event = new LSConfEvent('remoteConnectionRemoved', {\n                      detail: {\n                          connectionId: data.connectionId,\n                          username: data.username,\n                          mediaType: data.mediaType,\n                          parentConnectionId: data.parentConnectionId,\n                      },\n                  });\n                  this.dispatchEvent(event);\n              }\n              else if (data.type === 'remoteTrackAdded') {\n                  const event = new LSConfEvent('remoteTrackAdded', {\n                      detail: {\n                          subView: data.subView,\n                          kind: data.kind,\n                      },\n                  });\n                  this.dispatchEvent(event);\n              }\n              else if (data.type === 'getDeviceFailed') {\n                  const error = new LSConferenceIframeError(REQUEST_ERRORS['GetDeviceFailed']);\n                  this.dispatchEvent(new LSConfEvent('error', error));\n              }\n              else if (data.type === 'getSubViews') {\n                  if (data.error) {\n                      const error = new LSConferenceIframeError(REQUEST_ERRORS['GetSubViewsError']);\n                      this.getSubViewsCallback.error(error);\n                  }\n                  else {\n                      this.getSubViewsCallback.success(data.subViews);\n                  }\n              }\n              else if (data.type === 'highlight') {\n                  if (data.error) {\n                      const error = new LSConferenceIframeError(REQUEST_ERRORS['HighlightError']);\n                      this.highlightCallback.error(error);\n                  }\n                  else {\n                      this.highlightCallback.success();\n                  }\n              }\n              else if (data.type === 'sharePoV') {\n                  const { subView, poV } = data;\n                  this.dispatchEvent(new LSConfEvent('sharePoV', { detail: { subView, poV } }));\n              }\n              else if (data.type === 'getPoV') {\n                  if (data.error) {\n                      const error = new LSConferenceIframeError(REQUEST_ERRORS['GetPoVError']);\n                      this.getPoVCallback.error(error);\n                  }\n                  else {\n                      this.getPoVCallback.success(data.poV);\n                  }\n              }\n              else if (data.type === 'setPoV') {\n                  if (data.error) {\n                      const error = new LSConferenceIframeError(REQUEST_ERRORS['SetPoVError']);\n                      this.setPoVCallback.error(error);\n                  }\n                  else {\n                      this.setPoVCallback.success();\n                  }\n              }\n              else if (data.type === 'getMediaDevices') {\n                  if (data.error) {\n                      const error = new LSConferenceIframeError(REQUEST_ERRORS['GetMediaDevicesError']);\n                      this.getMediaDevicesCallback.error(error);\n                  }\n                  else {\n                      this.getMediaDevicesCallback.success(data.devices);\n                  }\n              }\n              else if (data.type === 'updatePointer') {\n                  if (data.error) {\n                      const error = new LSConferenceIframeError(REQUEST_ERRORS['UpdatePointerError']);\n                      this.updatePointerCallback.error(error);\n                  }\n                  else {\n                      this.updatePointerCallback.success();\n                  }\n              }\n              else if (data.type === 'getCaptureImage') {\n                  if (data.error) {\n                      if (data.errorType === 'GetCaptureImageErrorCameraMuted') {\n                          const error = new LSConferenceIframeError(REQUEST_ERRORS['GetCaptureImageErrorCameraMuted']);\n                          this.getCaptureImageCallback.error(error);\n                      }\n                      else {\n                          const error = new LSConferenceIframeError(REQUEST_ERRORS['GetCaptureImageError']);\n                          this.getCaptureImageCallback.error(error);\n                      }\n                  }\n                  else {\n                      this.getCaptureImageCallback.success(data.blob);\n                  }\n              }\n              else if (data.type === 'applicationEvent') {\n                  this.dispatchApplicationEvent(new CustomEvent(data.eventId, { detail: data.args }));\n              }\n              else if (data.type === 'getLSConfLog') {\n                  if (data.error) {\n                      const error = new LSConferenceIframeError(REQUEST_ERRORS['GetLSConfLogError']);\n                      this.getLSConfLogCallback.error(error);\n                  }\n                  else {\n                      this.getLSConfLogCallback.success(data.lsConfLog);\n                  }\n              }\n              else if (data.type === 'startReceiveVideo') {\n                  if (data.error) {\n                      const error = new LSConferenceIframeError(REQUEST_ERRORS['StartReceiveVideoError']);\n                      this.startReceiveVideoCallback.error(error);\n                  }\n                  else {\n                      this.startReceiveVideoCallback.success();\n                  }\n              }\n              else if (data.type === 'stopReceiveVideo') {\n                  if (data.error) {\n                      const error = new LSConferenceIframeError(REQUEST_ERRORS['StopReceiveVideoError']);\n                      this.stopReceiveVideoCallback.error(error);\n                  }\n                  else {\n                      this.stopReceiveVideoCallback.success();\n                  }\n              }\n              else if (data.type === 'error' && data.error) {\n                  const eventInitDict = {\n                      error: data.error,\n                      message: `code: ${data.error.detail.code}, type: ${data.error.detail.type}, error: ${data.error.detail.error}`,\n                  };\n                  if (this.state === 'connecting') {\n                      this.state = 'created';\n                      this.joinCallback.error(new LSConferenceIframeError(REQUEST_ERRORS['JoinFailed']));\n                  }\n                  this.dispatchEvent(new LSConfEvent('error', eventInitDict));\n              }\n          });\n      }\n      validateCreateParameters(parameters) {\n          if (parameters.thetaZoomMaxRange && typeof parameters.thetaZoomMaxRange !== 'number') {\n              return false;\n          }\n          if (parameters.defaultLayout !== undefined && parameters.defaultLayout !== 'gallery' && parameters.defaultLayout !== 'presentation' && parameters.defaultLayout !== 'fullscreen') {\n              return false;\n          }\n          if (parameters.room !== undefined) {\n              if (typeof parameters.room.entranceScreen !== undefined && parameters.room.entranceScreen !== 'none' && parameters.room.entranceScreen !== 'click') {\n                  return false;\n              }\n          }\n          if (parameters.toolbar !== undefined) {\n              if (typeof parameters.toolbar !== 'object') {\n                  return false;\n              }\n              if (parameters.toolbar.isHidden !== undefined && typeof parameters.toolbar.isHidden !== 'boolean') {\n                  return false;\n              }\n              if (parameters.toolbar.isHiddenCameraButton !== undefined && typeof parameters.toolbar.isHiddenCameraButton !== 'boolean') {\n                  return false;\n              }\n              if (parameters.toolbar.isHiddenMicButton !== undefined && typeof parameters.toolbar.isHiddenMicButton !== 'boolean') {\n                  return false;\n              }\n              if (parameters.toolbar.isHiddenScreenShareButton !== undefined && typeof parameters.toolbar.isHiddenScreenShareButton !== 'boolean') {\n                  return false;\n              }\n              if (parameters.toolbar.isHiddenParticipantsButton !== undefined && typeof parameters.toolbar.isHiddenParticipantsButton !== 'boolean') {\n                  return false;\n              }\n              if (parameters.toolbar.isHiddenDeviceSettingButton !== undefined && typeof parameters.toolbar.isHiddenDeviceSettingButton !== 'boolean') {\n                  return false;\n              }\n              if (parameters.toolbar.isHiddenExitButton !== undefined && typeof parameters.toolbar.isHiddenExitButton !== 'boolean') {\n                  return false;\n              }\n              if (parameters.toolbar.customItems !== undefined) {\n                  if (typeof parameters.toolbar.customItems !== 'object') {\n                      return false;\n                  }\n                  let isValid = true;\n                  parameters.toolbar.customItems.forEach((item) => {\n                      if (item.iconName !== undefined && typeof item.iconName !== 'string') {\n                          isValid = false;\n                      }\n                      if (item.type !== undefined && typeof item.type !== 'string') {\n                          isValid = false;\n                      }\n                  });\n                  if (!isValid) {\n                      return false;\n                  }\n              }\n          }\n          if (parameters.subView !== undefined) {\n              if (typeof parameters.subView !== 'object') {\n                  return false;\n              }\n              if (parameters.subView.enableAutoVideoReceiving !== undefined && typeof parameters.subView.enableAutoVideoReceiving !== 'boolean') {\n                  return false;\n              }\n              if (parameters.subView.menu !== undefined) {\n                  if (typeof parameters.subView.menu !== 'object') {\n                      return false;\n                  }\n                  if (parameters.subView.menu.isHidden !== undefined && typeof parameters.subView.menu.isHidden !== 'boolean') {\n                      return false;\n                  }\n                  if (parameters.subView.menu.isHiddenRecordingButton !== undefined && typeof parameters.subView.menu.isHiddenRecordingButton !== 'boolean') {\n                      return false;\n                  }\n                  if (parameters.subView.menu.isHiddenSharePoVButton !== undefined && typeof parameters.subView.menu.isHiddenSharePoVButton !== 'boolean') {\n                      return false;\n                  }\n              }\n              if (parameters.subView.theta !== undefined) {\n                  if (typeof parameters.subView.theta !== 'object') {\n                      return false;\n                  }\n                  if (parameters.subView.theta.isHiddenFramerate !== undefined && typeof parameters.subView.theta.isHiddenFramerate !== 'boolean') {\n                      return false;\n                  }\n              }\n          }\n          if (parameters.podCoordinates !== undefined) {\n              if (typeof parameters.podCoordinates !== 'object') {\n                  return false;\n              }\n              if (parameters.podCoordinates.upperLeft !== undefined && !Array.isArray(parameters.podCoordinates.upperLeft)) {\n                  return false;\n              }\n              if (parameters.podCoordinates.lowerRight !== undefined && !Array.isArray(parameters.podCoordinates.lowerRight)) {\n                  return false;\n              }\n          }\n          if (parameters.lsConfURL !== undefined) {\n              try {\n                  new URL(parameters.lsConfURL);\n              }\n              catch (e) {\n                  return false;\n              }\n          }\n          if (parameters.theme !== undefined) {\n              if (typeof parameters.theme !== 'object') {\n                  return false;\n              }\n              if (parameters.theme.primary !== undefined && typeof parameters.theme.primary !== 'string') {\n                  return false;\n              }\n              if (parameters.theme.background !== undefined && typeof parameters.theme.background !== 'string') {\n                  return false;\n              }\n              if (parameters.theme.surface !== undefined && typeof parameters.theme.surface !== 'string') {\n                  return false;\n              }\n              if (parameters.theme.onPrimary !== undefined && typeof parameters.theme.onPrimary !== 'string') {\n                  return false;\n              }\n              if (parameters.theme.primaryTextColor !== undefined && typeof parameters.theme.primaryTextColor !== 'string') {\n                  return false;\n              }\n              if (parameters.theme.secondaryTextColor !== undefined && typeof parameters.theme.secondaryTextColor !== 'string') {\n                  return false;\n              }\n              if (parameters.theme.components !== undefined) {\n                  if (typeof parameters.theme.components !== 'object') {\n                      return false;\n                  }\n                  if (parameters.theme.components.participantsVideoContainer !== undefined) {\n                      if (typeof parameters.theme.components.participantsVideoContainer !== 'object') {\n                          return false;\n                      }\n                      if (parameters.theme.components.participantsVideoContainer.background !== undefined && typeof parameters.theme.components.participantsVideoContainer.background !== 'string') {\n                          return false;\n                      }\n                      if (parameters.theme.components.participantsVideoContainer.subViewSwitchBackgroundColor !== undefined &&\n                          typeof parameters.theme.components.participantsVideoContainer.subViewSwitchBackgroundColor !== 'string') {\n                          return false;\n                      }\n                      if (parameters.theme.components.participantsVideoContainer.subViewSwitchIconColor !== undefined &&\n                          typeof parameters.theme.components.participantsVideoContainer.subViewSwitchIconColor !== 'string') {\n                          return false;\n                      }\n                  }\n                  if (parameters.theme.components.toolbar !== undefined) {\n                      if (typeof parameters.theme.components.toolbar !== 'object') {\n                          return false;\n                      }\n                      if (parameters.theme.components.toolbar.background !== undefined && typeof parameters.theme.components.toolbar.background !== 'string') {\n                          return false;\n                      }\n                      if (parameters.theme.components.toolbar.iconColor !== undefined && typeof parameters.theme.components.toolbar.iconColor !== 'string') {\n                          return false;\n                      }\n                  }\n                  if (parameters.theme.components.video !== undefined) {\n                      if (typeof parameters.theme.components.video !== 'object') {\n                          return false;\n                      }\n                      if (parameters.theme.components.video.background !== undefined && typeof parameters.theme.components.video.background !== 'string') {\n                          return false;\n                      }\n                      if (parameters.theme.components.video.textColor !== undefined && typeof parameters.theme.components.video.textColor !== 'string') {\n                          return false;\n                      }\n                      if (parameters.theme.components.video.textBackgroundColor !== undefined && typeof parameters.theme.components.video.textBackgroundColor !== 'string') {\n                          return false;\n                      }\n                      if (parameters.theme.components.video.iconColor !== undefined && typeof parameters.theme.components.video.iconColor !== 'string') {\n                          return false;\n                      }\n                      if (parameters.theme.components.video.menuTextColor !== undefined && typeof parameters.theme.components.video.menuTextColor !== 'string') {\n                          return false;\n                      }\n                      if (parameters.theme.components.video.menuBackgroundColor !== undefined && typeof parameters.theme.components.video.menuBackgroundColor !== 'string') {\n                          return false;\n                      }\n                      if (parameters.theme.components.video.highlightBorderColor !== undefined && typeof parameters.theme.components.video.highlightBorderColor !== 'string') {\n                          return false;\n                      }\n                      if (parameters.theme.components.video.highlightShadowColor !== undefined && typeof parameters.theme.components.video.highlightShadowColor !== 'string') {\n                          return false;\n                      }\n                  }\n                  if (parameters.theme.components.dialog !== undefined) {\n                      if (typeof parameters.theme.components.dialog !== 'object') {\n                          return false;\n                      }\n                      if (parameters.theme.components.dialog.inputFocusColor !== undefined && typeof parameters.theme.components.dialog.inputFocusColor !== 'string') {\n                          return false;\n                      }\n                  }\n              }\n          }\n          return true;\n      }\n      validateJoinParameters(clientId, accessToken, connectionId, connectOptions) {\n          if (typeof clientId !== 'string') {\n              return false;\n          }\n          if (typeof accessToken !== 'string') {\n              return false;\n          }\n          if (typeof connectionId !== 'string') {\n              return false;\n          }\n          if (typeof connectOptions.username !== 'string') {\n              return false;\n          }\n          if (typeof connectOptions.enableAudio !== 'boolean') {\n              return false;\n          }\n          if (typeof connectOptions.enableVideo !== 'boolean') {\n              return false;\n          }\n          if (connectOptions.mode !== undefined) {\n              if (typeof connectOptions.mode !== 'string') {\n                  return false;\n              }\n              if (connectOptions.mode !== 'normal' && connectOptions.mode !== 'viewer') {\n                  return false;\n              }\n          }\n          if (connectOptions.maxVideoBitrate !== undefined) {\n              if (typeof connectOptions.maxVideoBitrate !== 'number') {\n                  return false;\n              }\n              if (connectOptions.maxVideoBitrate < 100 || 20000 < connectOptions.maxVideoBitrate) {\n                  return false;\n              }\n          }\n          if (connectOptions.maxShareBitrate !== undefined) {\n              if (typeof connectOptions.maxShareBitrate !== 'number') {\n                  return false;\n              }\n              if (connectOptions.maxShareBitrate < 100 || 20000 < connectOptions.maxShareBitrate) {\n                  return false;\n              }\n          }\n          if (connectOptions.useDummyDevice !== undefined) {\n              if (typeof connectOptions.useDummyDevice !== 'boolean') {\n                  return false;\n              }\n          }\n          if (connectOptions.signalingURL !== undefined) {\n              try {\n                  new URL(connectOptions.signalingURL);\n              }\n              catch (e) {\n                  return false;\n              }\n          }\n          if (connectOptions.videoCodec !== undefined) {\n              if (typeof connectOptions.videoCodec !== 'string') {\n                  return false;\n              }\n              if (connectOptions.videoCodec !== 'h264' &&\n                  connectOptions.videoCodec !== 'vp8' &&\n                  connectOptions.videoCodec !== 'vp9' &&\n                  connectOptions.videoCodec !== 'h265' &&\n                  connectOptions.videoCodec !== 'av1') {\n                  return false;\n              }\n          }\n          if (connectOptions.videoAudioConstraints !== undefined && typeof connectOptions.videoAudioConstraints !== 'object') {\n              return false;\n          }\n          if (connectOptions.screenShareConstraints !== undefined && typeof connectOptions.screenShareConstraints !== 'object') {\n              return false;\n          }\n          return true;\n      }\n      validateScreenShareParameters(param) {\n          if (typeof param.accessToken !== 'string') {\n              return false;\n          }\n          if (typeof param.connectionId !== 'string') {\n              return false;\n          }\n          return true;\n      }\n      validateSubViewType(subView) {\n          if (subView.connectionId !== undefined && typeof subView.connectionId !== 'string') {\n              return false;\n          }\n          if (subView.isTheta !== undefined && typeof subView.isTheta !== 'boolean') {\n              return false;\n          }\n          if (subView.type !== undefined && subView.type !== 'VIDEO_AUDIO' && subView.type !== 'SCREEN_SHARE') {\n              return false;\n          }\n          return true;\n      }\n      validatePoVType(poV) {\n          if (poV.pan !== undefined && typeof poV.pan !== 'number') {\n              return false;\n          }\n          if (poV.tilt !== undefined && typeof poV.tilt !== 'number') {\n              return false;\n          }\n          if (poV.fov !== undefined && typeof poV.fov !== 'number') {\n              return false;\n          }\n          return true;\n      }\n      validateLayoutType(layout) {\n          if (layout !== undefined && (typeof layout !== 'string' || (layout !== 'gallery' && layout !== 'presentation' && layout !== 'fullscreen'))) {\n              return false;\n          }\n          return true;\n      }\n      validateCaptureImageOptionsType(options) {\n          if (options.mimeType !== undefined) {\n              if (typeof options.mimeType !== 'string') {\n                  return false;\n              }\n              if (options.mimeType !== 'image/png' && options.mimeType !== 'image/jpeg') {\n                  return false;\n              }\n          }\n          if (options.qualityArgument !== undefined && typeof options.qualityArgument !== 'number') {\n              return false;\n          }\n          return true;\n      }\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      setRequestTimer(reject, error, time) {\n          return window.setTimeout(() => {\n              // 指定された時間内で処理が完了しない場合は reject する\n              if (this.iframeElement.contentWindow) {\n                  this.iframeElement.contentWindow.postMessage({\n                      type: 'connectCancel',\n                  }, this.lsConfURL);\n              }\n              this.dispatchEvent(new LSConfEvent('error', error));\n              reject(error);\n          }, time);\n      }\n      __create(parameters) {\n          return new Promise((resolve, reject) => {\n              this.state = 'creating';\n              if (parameters.lsConfURL) {\n                  this.lsConfURL = parameters.lsConfURL;\n                  this.iframeElement.src = this.lsConfURL;\n              }\n              const createTimeoutId = this.setRequestTimer(reject, new LSConferenceIframeError(REQUEST_ERRORS['CreateTimeout']), DEFAULT_CREATE_TIMEOUT_MSEC);\n              // allow =  \"display-capture\" は Chrome だと unknown parameter の warning が出るが\n              // MDN の仕様では getDM する場合設定する必要があるので記載している\n              // cf: https://developer.mozilla.org/en-US/docs/Web/API/Screen_Capture_API/Using_Screen_Capture\n              this.iframeElement.allow = 'camera *;microphone *;autoplay *;display-capture *; fullscreen *';\n              this.parentElement.appendChild(this.iframeElement);\n              this.iframeElement.onload = () => {\n                  // Safari では onload 時に即時に postMessage することができないため、500 ms 遅延させて postMessage を実行する\n                  window.setTimeout(() => {\n                      if (!this.iframeElement.contentWindow) {\n                          this.state = 'idle';\n                          throw new LSConferenceIframeError(INTERNAL_ERRORS['InternalError5001']);\n                      }\n                      const postMessageParameters = {\n                          type: 'create',\n                          origin: location.href,\n                          parameters: {\n                              defaultLayout: parameters.defaultLayout,\n                              room: parameters.room,\n                              toolbar: parameters.toolbar,\n                              podCoordinates: parameters.podCoordinates,\n                              thetaZoomMaxRange: parameters.thetaZoomMaxRange,\n                              subView: parameters.subView,\n                              theme: parameters.theme,\n                              locales: parameters.locales,\n                          },\n                      };\n                      try {\n                          this.iframeElement.contentWindow.postMessage(postMessageParameters, this.lsConfURL);\n                      }\n                      catch (e) {\n                          this.state = 'idle';\n                          const error = new LSConferenceIframeError(REQUEST_ERRORS['CreateFailed']);\n                          this.dispatchEvent(new LSConfEvent('error', error));\n                          return reject(error);\n                      }\n                      this.setWindowMessageCallback();\n                      clearTimeout(createTimeoutId);\n                      this.state = 'created';\n                      return resolve();\n                  }, 500);\n              };\n          });\n      }\n      static create(parentElement, parameters) {\n          return new Promise((resolve, reject) => {\n              const instance = new this(parentElement);\n              const element = parentElement || document.querySelector('body');\n              if (!(element instanceof HTMLElement)) {\n                  const error = new LSConferenceIframeError(REQUEST_ERRORS['CreateArgsInvalid']);\n                  instance.dispatchEvent(new LSConfEvent('error', error));\n                  return reject(error);\n              }\n              if (!instance.validateCreateParameters(parameters)) {\n                  const error = new LSConferenceIframeError(REQUEST_ERRORS['CreateArgsInvalid']);\n                  instance.dispatchEvent(new LSConfEvent('error', error));\n                  return reject(error);\n              }\n              let extParam = parameters;\n              try {\n                  // eslint-disable-next-line @typescript-eslint/no-var-requires\n                  const enJson = require('./lang/en.json');\n                  // eslint-disable-next-line @typescript-eslint/no-var-requires\n                  const jaJson = require('./lang/ja.json');\n                  extParam = { ...parameters, locales: { ja: jaJson, en: enJson } };\n              }\n              catch (e) {\n                  console.warn(`Language file could not be read : ${e.message}`);\n              }\n              instance\n                  .__create(extParam)\n                  .then(() => {\n                  resolve(instance);\n              })\n                  .catch((e) => {\n                  //XXX(kdxu): __create 内で dispatch error event を行っているため、この時点では error event を dispatch しない\n                  reject(e);\n              });\n          });\n      }\n      async join(clientId, accessToken, connectionId, connectOptions) {\n          return new Promise((resolve, reject) => {\n              this.state = 'connecting';\n              const joinTimeoutId = this.setRequestTimer(reject, new LSConferenceIframeError(REQUEST_ERRORS['JoinFailedTimeout']), DEFAULT_JOIN_TIMEOUT_MSEC);\n              if (!this.iframeElement.contentWindow) {\n                  clearTimeout(joinTimeoutId);\n                  this.state = 'created';\n                  throw new LSConferenceIframeError(INTERNAL_ERRORS['InternalError5001']);\n              }\n              if (!this.validateJoinParameters(clientId, accessToken, connectionId, connectOptions)) {\n                  this.state = 'created';\n                  const error = new LSConferenceIframeError(REQUEST_ERRORS['JoinArgsInvalid']);\n                  this.dispatchEvent(new LSConfEvent('error', error));\n                  clearTimeout(joinTimeoutId);\n                  return reject(error);\n              }\n              // optionalパラメータのデフォルト値の設定\n              connectOptions.signalingURL = connectOptions.signalingURL || DEFAULT_SIGNALING_URL;\n              connectOptions.maxVideoBitrate = connectOptions.maxVideoBitrate || DEFAULT_MAX_BITRATE;\n              connectOptions.maxShareBitrate = connectOptions.maxShareBitrate || DEFAULT_MAX_BITRATE;\n              connectOptions.useDummyDevice = connectOptions.useDummyDevice || DEFAULT_USE_DUMMY_DEVICE;\n              connectOptions.videoCodec = connectOptions.videoCodec || DEFAULT_VIDEO_CODEC;\n              connectOptions.mode = connectOptions.mode || DEFAULT_MODE;\n              // video audio の role, mediaType は固定\n              const postMessageParameters = {\n                  type: 'connect',\n                  clientId: clientId,\n                  accessToken: accessToken,\n                  connectionId: connectionId,\n                  role: 'sendrecv',\n                  mediaType: 'videoaudio',\n                  connectOptions: connectOptions,\n              };\n              this.joinCallback = {\n                  success: () => {\n                      clearTimeout(joinTimeoutId);\n                      resolve();\n                  },\n                  error: (err) => {\n                      clearTimeout(joinTimeoutId);\n                      reject(err);\n                  },\n                  accepted: () => {\n                      clearTimeout(joinTimeoutId);\n                  },\n              };\n              try {\n                  this.iframeElement.contentWindow.postMessage(postMessageParameters, this.lsConfURL);\n              }\n              catch (e) {\n                  this.state = 'created';\n                  const error = new LSConferenceIframeError(REQUEST_ERRORS['JoinFailed']);\n                  this.dispatchEvent(new LSConfEvent('error', error));\n                  clearTimeout(joinTimeoutId);\n                  return reject(error);\n              }\n              this.clientId = clientId;\n              this.connectOptions = connectOptions;\n          });\n      }\n      leave() {\n          return new Promise((resolve, reject) => {\n              this.state = 'closing';\n              if (!this.iframeElement.contentWindow) {\n                  this.state = 'open';\n                  throw new LSConferenceIframeError(INTERNAL_ERRORS['InternalError5001']);\n              }\n              const postMessageParameters = {\n                  type: 'leave',\n              };\n              try {\n                  this.iframeElement.contentWindow.postMessage(postMessageParameters, this.lsConfURL);\n              }\n              catch (e) {\n                  this.state = 'open';\n                  const error = new LSConferenceIframeError(REQUEST_ERRORS['CloseFailed']);\n                  this.dispatchEvent(new LSConfEvent('error', error));\n                  return reject(error);\n              }\n              return resolve();\n          });\n      }\n      onShareRequested(callback) {\n          if (typeof callback !== 'function') {\n              throw new TypeError(`Failed to execute 'onShareRequested' on '${this.constructor.name}': The callback provided as parameter 1 is not an object.`);\n          }\n          this.shareRequestedCallback = callback;\n      }\n      getSubViews() {\n          return new Promise((resolve, reject) => {\n              if (!this.iframeElement.contentWindow) {\n                  throw new LSConferenceIframeError(INTERNAL_ERRORS['InternalError5001']);\n              }\n              const postMessageParameters = {\n                  type: 'getSubViews',\n              };\n              this.getSubViewsCallback = { success: (subViews) => resolve(subViews), error: (err) => reject(err) };\n              try {\n                  this.iframeElement.contentWindow.postMessage(postMessageParameters, this.lsConfURL);\n              }\n              catch (e) {\n                  const error = new LSConferenceIframeError(REQUEST_ERRORS['GetSubViewsFailed']);\n                  this.dispatchEvent(new LSConfEvent('error', error));\n                  return reject(error);\n              }\n          });\n      }\n      highlight(subView) {\n          return new Promise((resolve, reject) => {\n              if (!this.iframeElement.contentWindow) {\n                  return reject(new LSConferenceIframeError(INTERNAL_ERRORS['InternalError5001']));\n              }\n              if (!this.validateSubViewType(subView)) {\n                  return reject(new LSConferenceIframeError(REQUEST_ERRORS['HighlightArgsInvalid']));\n              }\n              const postMessageParameters = {\n                  type: 'highlight',\n                  subView: subView,\n              };\n              this.highlightCallback = { success: () => resolve(), error: (err) => reject(err) };\n              try {\n                  this.iframeElement.contentWindow.postMessage(postMessageParameters, this.lsConfURL);\n              }\n              catch (e) {\n                  const error = new LSConferenceIframeError(REQUEST_ERRORS['HighlightFailed']);\n                  this.dispatchEvent(new LSConfEvent('error', error));\n                  return reject(error);\n              }\n          });\n      }\n      getPoV(subView) {\n          return new Promise((resolve, reject) => {\n              if (!this.iframeElement.contentWindow) {\n                  return reject(new LSConferenceIframeError(INTERNAL_ERRORS['InternalError5001']));\n              }\n              if (!this.validateSubViewType(subView)) {\n                  return reject(new LSConferenceIframeError(REQUEST_ERRORS['GetPoVArgsInvalid']));\n              }\n              if (!subView.isTheta) {\n                  return reject(new LSConferenceIframeError(REQUEST_ERRORS['GetPoVArgsInvalid']));\n              }\n              const postMessageParameters = {\n                  type: 'getPoV',\n                  subView: subView,\n              };\n              this.getPoVCallback = { success: (poV) => resolve(poV), error: (err) => reject(err) };\n              try {\n                  this.iframeElement.contentWindow.postMessage(postMessageParameters, this.lsConfURL);\n              }\n              catch (e) {\n                  const error = new LSConferenceIframeError(REQUEST_ERRORS['GetPoVFailed']);\n                  this.dispatchEvent(new LSConfEvent('error', error));\n                  return reject(error);\n              }\n          });\n      }\n      setPoV(subView, poV) {\n          return new Promise((resolve, reject) => {\n              if (!this.iframeElement.contentWindow) {\n                  return reject(new LSConferenceIframeError(INTERNAL_ERRORS['InternalError5001']));\n              }\n              if (!this.validateSubViewType(subView) || !this.validatePoVType(poV)) {\n                  return reject(new LSConferenceIframeError(REQUEST_ERRORS['SetPoVArgsInvalid']));\n              }\n              if (!subView.isTheta) {\n                  return reject(new LSConferenceIframeError(REQUEST_ERRORS['SetPoVArgsInvalid']));\n              }\n              const postMessageParameters = {\n                  type: 'setPoV',\n                  subView: subView,\n                  poV: poV,\n              };\n              this.setPoVCallback = { success: () => resolve(), error: (err) => reject(err) };\n              try {\n                  this.iframeElement.contentWindow.postMessage(postMessageParameters, this.lsConfURL);\n              }\n              catch (e) {\n                  const error = new LSConferenceIframeError(REQUEST_ERRORS['SetPoVFailed']);\n                  this.dispatchEvent(new LSConfEvent('error', error));\n                  return reject(error);\n              }\n          });\n      }\n      getMediaDevices() {\n          return new Promise((resolve, reject) => {\n              if (!this.iframeElement.contentWindow) {\n                  return reject(new LSConferenceIframeError(INTERNAL_ERRORS['InternalError5001']));\n              }\n              if (this.connectOptions && this.connectOptions.mode === 'viewer' && this.state === 'open') {\n                  return reject(new LSConferenceIframeError(REQUEST_ERRORS['ModeInvalid']));\n              }\n              const postMessageParameters = {\n                  type: 'getMediaDevices',\n              };\n              this.getMediaDevicesCallback = { success: (devices) => resolve(devices), error: (err) => reject(err) };\n              try {\n                  this.iframeElement.contentWindow.postMessage(postMessageParameters, this.lsConfURL);\n              }\n              catch (e) {\n                  const error = new LSConferenceIframeError(REQUEST_ERRORS['GetMediaDevicesFailed']);\n                  this.dispatchEvent(new LSConfEvent('error', error));\n                  return reject(error);\n              }\n          });\n      }\n      setCameraMute(isEnabled) {\n          return new Promise((resolve, reject) => {\n              if (!this.iframeElement.contentWindow) {\n                  return reject(new LSConferenceIframeError(INTERNAL_ERRORS['InternalError5001']));\n              }\n              if (this.connectOptions && this.connectOptions.mode === 'viewer' && this.state === 'open') {\n                  return reject(new LSConferenceIframeError(REQUEST_ERRORS['ModeInvalid']));\n              }\n              const postMessageParameters = {\n                  type: 'cameraMute',\n                  isEnabled: isEnabled,\n              };\n              try {\n                  this.iframeElement.contentWindow.postMessage(postMessageParameters, this.lsConfURL);\n              }\n              catch (e) {\n                  const error = new LSConferenceIframeError(REQUEST_ERRORS['CameraMuteFailed']);\n                  this.dispatchEvent(new LSConfEvent('error', error));\n                  return reject(error);\n              }\n              return resolve();\n          });\n      }\n      setCameraDevice(deviceId) {\n          return new Promise((resolve, reject) => {\n              if (!this.iframeElement.contentWindow) {\n                  return reject(new LSConferenceIframeError(INTERNAL_ERRORS['InternalError5001']));\n              }\n              if (this.connectOptions && this.connectOptions.mode === 'viewer' && this.state === 'open') {\n                  return reject(new LSConferenceIframeError(REQUEST_ERRORS['ModeInvalid']));\n              }\n              const postMessageParameters = {\n                  type: 'setCameraDevice',\n                  deviceId: deviceId,\n              };\n              try {\n                  this.iframeElement.contentWindow.postMessage(postMessageParameters, this.lsConfURL);\n              }\n              catch (e) {\n                  const error = new LSConferenceIframeError(REQUEST_ERRORS['SetCameraDeviceFailed']);\n                  this.dispatchEvent(new LSConfEvent('error', error));\n                  return reject(error);\n              }\n              return resolve();\n          });\n      }\n      setMicMute(isEnabled) {\n          return new Promise((resolve, reject) => {\n              if (!this.iframeElement.contentWindow) {\n                  return reject(new LSConferenceIframeError(INTERNAL_ERRORS['InternalError5001']));\n              }\n              if (this.connectOptions && this.connectOptions.mode === 'viewer' && this.state === 'open') {\n                  return reject(new LSConferenceIframeError(REQUEST_ERRORS['ModeInvalid']));\n              }\n              const postMessageParameters = {\n                  type: 'micMute',\n                  isEnabled: isEnabled,\n              };\n              try {\n                  this.iframeElement.contentWindow.postMessage(postMessageParameters, this.lsConfURL);\n              }\n              catch (e) {\n                  const error = new LSConferenceIframeError(REQUEST_ERRORS['MicMuteFailed']);\n                  this.dispatchEvent(new LSConfEvent('error', error));\n                  return reject(error);\n              }\n              return resolve();\n          });\n      }\n      setMicDevice(deviceId) {\n          return new Promise((resolve, reject) => {\n              if (!this.iframeElement.contentWindow) {\n                  return reject(new LSConferenceIframeError(INTERNAL_ERRORS['InternalError5001']));\n              }\n              if (this.connectOptions && this.connectOptions.mode === 'viewer' && this.state === 'open') {\n                  return reject(new LSConferenceIframeError(REQUEST_ERRORS['ModeInvalid']));\n              }\n              const postMessageParameters = {\n                  type: 'setMicDevice',\n                  deviceId: deviceId,\n              };\n              try {\n                  this.iframeElement.contentWindow.postMessage(postMessageParameters, this.lsConfURL);\n              }\n              catch (e) {\n                  const error = new LSConferenceIframeError(REQUEST_ERRORS['SetMicDeviceFailed']);\n                  this.dispatchEvent(new LSConfEvent('error', error));\n                  return reject(error);\n              }\n              return resolve();\n          });\n      }\n      enablePointer(isEnabled) {\n          return new Promise((resolve, reject) => {\n              if (!this.iframeElement.contentWindow) {\n                  return reject(new LSConferenceIframeError(INTERNAL_ERRORS['InternalError5001']));\n              }\n              const postMessageParameters = {\n                  type: 'enablePointer',\n                  isEnabled: isEnabled,\n              };\n              try {\n                  this.iframeElement.contentWindow.postMessage(postMessageParameters, this.lsConfURL);\n              }\n              catch (e) {\n                  const error = new LSConferenceIframeError(REQUEST_ERRORS['EnablePointerFailed']);\n                  this.dispatchEvent(new LSConfEvent('error', error));\n                  return reject(error);\n              }\n              return resolve();\n          });\n      }\n      updatePointer(subView, connectionId, poV, username, color) {\n          return new Promise((resolve, reject) => {\n              if (!this.iframeElement.contentWindow) {\n                  return reject(new LSConferenceIframeError(INTERNAL_ERRORS['InternalError5001']));\n              }\n              if (!this.validateSubViewType(subView) || (poV && !this.validatePoVType(poV))) {\n                  return reject(new LSConferenceIframeError(REQUEST_ERRORS['UpdatePointerArgsInvalid']));\n              }\n              if (typeof connectionId !== 'string') {\n                  return reject(new LSConferenceIframeError(REQUEST_ERRORS['UpdatePointerArgsInvalid']));\n              }\n              if (username !== undefined && typeof username !== 'string') {\n                  return reject(new LSConferenceIframeError(REQUEST_ERRORS['UpdatePointerArgsInvalid']));\n              }\n              if (color !== undefined && typeof color !== 'string') {\n                  return reject(new LSConferenceIframeError(REQUEST_ERRORS['UpdatePointerArgsInvalid']));\n              }\n              const postMessageParameters = {\n                  type: 'updatePointer',\n                  subView: subView,\n                  connectionId: connectionId,\n                  poV: poV,\n                  username: username,\n                  color: color,\n              };\n              this.updatePointerCallback = { success: () => resolve(), error: (err) => reject(err) };\n              try {\n                  this.iframeElement.contentWindow.postMessage(postMessageParameters, this.lsConfURL);\n              }\n              catch (e) {\n                  const error = new LSConferenceIframeError(REQUEST_ERRORS['UpdatePointerFailed']);\n                  this.dispatchEvent(new LSConfEvent('error', error));\n                  return reject(error);\n              }\n          });\n      }\n      getReport(type, filterOption) {\n          return new Promise((resolve, reject) => {\n              if (!this.iframeElement.contentWindow) {\n                  throw new LSConferenceIframeError(INTERNAL_ERRORS['InternalError5001']);\n              }\n              const postMessageParameters = {\n                  type: type,\n                  filterOption: filterOption,\n              };\n              this.logCallbacks.set(type, { success: (log) => resolve(log), error: (err) => reject(err) });\n              try {\n                  this.iframeElement.contentWindow.postMessage(postMessageParameters, this.lsConfURL);\n              }\n              catch (e) {\n                  this.logCallbacks.delete(type);\n                  const error = new LSConferenceIframeError(REQUEST_ERRORS['GetReportFailed']);\n                  this.dispatchEvent(new LSConfEvent('error', error));\n                  return reject(error);\n              }\n          });\n      }\n      getLSConfLog() {\n          return new Promise((resolve, reject) => {\n              if (!this.iframeElement.contentWindow) {\n                  return reject(new LSConferenceIframeError(INTERNAL_ERRORS['InternalError5001']));\n              }\n              const postMessageParameters = {\n                  type: 'getLSConfLog',\n              };\n              this.getLSConfLogCallback = {\n                  success: async (lsConfLog) => resolve(lsConfLog),\n                  error: (err) => reject(err),\n              };\n              try {\n                  this.iframeElement.contentWindow.postMessage(postMessageParameters, this.lsConfURL);\n              }\n              catch (e) {\n                  const error = new LSConferenceIframeError(REQUEST_ERRORS['GetLSConfLogFailed']);\n                  this.dispatchEvent(new LSConfEvent('error', error));\n                  return reject(error);\n              }\n          });\n      }\n      getVideoAudioStats() {\n          return this.getReport('VideoAudioStats');\n      }\n      getScreenShareStats() {\n          return this.getReport('ScreenShareStats');\n      }\n      changeLayout(layout, subViews) {\n          return new Promise((resolve, reject) => {\n              if (!this.iframeElement.contentWindow) {\n                  return reject(new LSConferenceIframeError(INTERNAL_ERRORS['InternalError5001']));\n              }\n              let isValidSubViews = true;\n              if (subViews) {\n                  subViews.forEach((subView) => {\n                      if (!this.validateSubViewType(subView)) {\n                          isValidSubViews = false;\n                      }\n                  });\n              }\n              if (!this.validateLayoutType(layout) || !isValidSubViews) {\n                  return reject(new LSConferenceIframeError(REQUEST_ERRORS['ChangeLayoutArgsInvalid']));\n              }\n              const postMessageParameters = {\n                  type: 'changeLayout',\n                  layout,\n                  subViews,\n              };\n              try {\n                  this.iframeElement.contentWindow.postMessage(postMessageParameters, this.lsConfURL);\n              }\n              catch (e) {\n                  const error = new LSConferenceIframeError(REQUEST_ERRORS['ChangeLayoutFailed']);\n                  this.dispatchEvent(new LSConfEvent('error', error));\n                  return reject(error);\n              }\n              return resolve();\n          });\n      }\n      addRecordingMember(subView, connectionId) {\n          return new Promise((resolve, reject) => {\n              if (!this.iframeElement.contentWindow) {\n                  return reject(new LSConferenceIframeError(INTERNAL_ERRORS['InternalError5001']));\n              }\n              if (typeof connectionId !== 'string') {\n                  return reject(new LSConferenceIframeError(REQUEST_ERRORS['AddRecordingMemberArgsInvalid']));\n              }\n              if (!this.validateSubViewType(subView)) {\n                  return reject(new LSConferenceIframeError(REQUEST_ERRORS['AddRecordingMemberArgsInvalid']));\n              }\n              const postMessageParameters = {\n                  type: 'addRecordingMember',\n                  subView,\n                  connectionId,\n              };\n              this.addRecordingMemberCallback = { success: () => resolve(), error: (err) => reject(err) };\n              try {\n                  this.iframeElement.contentWindow.postMessage(postMessageParameters, this.lsConfURL);\n              }\n              catch (e) {\n                  const error = new LSConferenceIframeError(REQUEST_ERRORS['AddRecordingMemberFailed']);\n                  this.dispatchEvent(new LSConfEvent('error', error));\n                  return reject(error);\n              }\n          });\n      }\n      removeRecordingMember(subView, connectionId) {\n          return new Promise((resolve, reject) => {\n              if (!this.iframeElement.contentWindow) {\n                  return reject(new LSConferenceIframeError(INTERNAL_ERRORS['InternalError5001']));\n              }\n              if (typeof connectionId !== 'string') {\n                  return reject(new LSConferenceIframeError(REQUEST_ERRORS['RemoveRecordingMemberArgsInvalid']));\n              }\n              if (!this.validateSubViewType(subView)) {\n                  return reject(new LSConferenceIframeError(REQUEST_ERRORS['RemoveRecordingMemberArgsInvalid']));\n              }\n              const postMessageParameters = {\n                  type: 'removeRecordingMember',\n                  subView,\n                  connectionId,\n              };\n              this.removeRecordingMemberCallback = { success: () => resolve(), error: (err) => reject(err) };\n              try {\n                  this.iframeElement.contentWindow.postMessage(postMessageParameters, this.lsConfURL);\n              }\n              catch (e) {\n                  const error = new LSConferenceIframeError(REQUEST_ERRORS['RemoveRecordingMemberFailed']);\n                  this.dispatchEvent(new LSConfEvent('error', error));\n                  return reject(error);\n              }\n          });\n      }\n      getCaptureImage(subView, options) {\n          return new Promise((resolve, reject) => {\n              if (!this.iframeElement.contentWindow) {\n                  return reject(new LSConferenceIframeError(INTERNAL_ERRORS['InternalError5001']));\n              }\n              if (!this.validateSubViewType(subView)) {\n                  return reject(new LSConferenceIframeError(REQUEST_ERRORS['GetCaptureImageArgsInvalid']));\n              }\n              if (!this.validateCaptureImageOptionsType(options)) {\n                  return reject(new LSConferenceIframeError(REQUEST_ERRORS['GetCaptureImageArgsInvalid']));\n              }\n              const postMessageParameters = {\n                  type: 'getCaptureImage',\n                  subView,\n                  options,\n              };\n              this.getCaptureImageCallback = { success: (blob) => resolve(blob), error: (err) => reject(err) };\n              try {\n                  this.iframeElement.contentWindow.postMessage(postMessageParameters, this.lsConfURL);\n              }\n              catch (e) {\n                  const error = new LSConferenceIframeError(REQUEST_ERRORS['GetCaptureImageFailed']);\n                  this.dispatchEvent(new LSConfEvent('error', error));\n                  return reject(error);\n              }\n          });\n      }\n      startReceiveVideo(subView) {\n          return new Promise((resolve, reject) => {\n              if (!this.iframeElement.contentWindow) {\n                  return reject(new LSConferenceIframeError(INTERNAL_ERRORS['InternalError5001']));\n              }\n              if (!this.validateSubViewType(subView)) {\n                  return reject(new LSConferenceIframeError(REQUEST_ERRORS['StartReceiveVideoArgsInvalid']));\n              }\n              const postMessageParameters = {\n                  type: 'startReceiveVideo',\n                  subView,\n              };\n              this.startReceiveVideoCallback = { success: () => resolve(), error: (err) => reject(err) };\n              try {\n                  this.iframeElement.contentWindow.postMessage(postMessageParameters, this.lsConfURL);\n              }\n              catch (e) {\n                  const error = new LSConferenceIframeError(REQUEST_ERRORS['StartReceiveVideoFailed']);\n                  this.dispatchEvent(new LSConfEvent('error', error));\n                  return reject(error);\n              }\n          });\n      }\n      stopReceiveVideo(subView) {\n          return new Promise((resolve, reject) => {\n              if (!this.iframeElement.contentWindow) {\n                  return reject(new LSConferenceIframeError(INTERNAL_ERRORS['InternalError5001']));\n              }\n              if (!this.validateSubViewType(subView)) {\n                  return reject(new LSConferenceIframeError(REQUEST_ERRORS['StopReceiveVideoArgsInvalid']));\n              }\n              const postMessageParameters = {\n                  type: 'stopReceiveVideo',\n                  subView,\n              };\n              this.stopReceiveVideoCallback = { success: () => resolve(), error: (err) => reject(err) };\n              try {\n                  this.iframeElement.contentWindow.postMessage(postMessageParameters, this.lsConfURL);\n              }\n              catch (e) {\n                  const error = new LSConferenceIframeError(REQUEST_ERRORS['StopReceiveVideoFailed']);\n                  this.dispatchEvent(new LSConfEvent('error', error));\n                  return reject(error);\n              }\n          });\n      }\n      iframe() {\n          return this.iframeElement;\n      }\n      addEventListener(type, callback, options) {\n          if (arguments.length < 2) {\n              throw new TypeError(`Failed to execute 'addEventListener' on '${this.constructor.name}': 2 arguments required, but only ${arguments.length} present.`);\n          }\n          if (typeof callback !== 'function' && typeof callback !== 'object') {\n              throw new TypeError(`Failed to execute 'addEventListener' on '${this.constructor.name}': The callback provided as parameter 2 is not an object.`);\n          }\n          const listeners = this.eventListeners.get(type) || [];\n          listeners.push({ listener: callback, options: options });\n          this.eventListeners.set(type, listeners);\n      }\n      removeEventListener(type, callback, _options) {\n          // window.removeEventListener の options 相当の実装はしない\n          if (arguments.length < 2) {\n              throw new TypeError(`Failed to execute 'removeEventListener' on '${this.constructor.name}': 2 arguments required, but only ${arguments.length} present.`);\n          }\n          if (typeof callback !== 'function' && typeof callback !== 'object') {\n              throw new TypeError(`Failed to execute 'removeEventListener' on '${this.constructor.name}': The callback provided as parameter 2 is not an object.`);\n          }\n          const listeners = this.eventListeners.get(type) || [];\n          const removedListeners = listeners.filter(({ listener }) => listener !== callback);\n          this.eventListeners.set(type, removedListeners);\n      }\n      dispatchEvent(event) {\n          // eventListeners の options 相当の実装はしない\n          if (!(event instanceof LSConfEvent)) {\n              throw new TypeError(`Failed to execute 'dispatchEvent' on '${this.constructor.name}': parameter 1 is not of type 'LSConfEvent'.`);\n          }\n          const type = event.type;\n          const listeners = this.eventListeners.get(type);\n          if (listeners) {\n              listeners.forEach(({ listener, options }) => {\n                  listener.call(this, event.event);\n                  if (options && !options.once)\n                      return;\n                  this.removeEventListener(event.type, listener, options);\n              });\n          }\n      }\n      addApplicationEventListener(type, callback, options) {\n          if (arguments.length < 2) {\n              throw new TypeError(`Failed to execute 'addApplicationEventListener' on '${this.constructor.name}': 2 arguments required, but only ${arguments.length} present.`);\n          }\n          if (typeof callback !== 'function' && typeof callback !== 'object') {\n              throw new TypeError(`Failed to execute 'addApplicationEventListener' on '${this.constructor.name}': The callback provided as parameter 2 is not an object.`);\n          }\n          const listeners = this.applicationEventListeners.get(type) || [];\n          listeners.push({ listener: callback, options: options });\n          this.applicationEventListeners.set(type, listeners);\n      }\n      removeApplicationEventListener(type, callback, _options) {\n          // window.removeEventListener の options 相当の実装はしない\n          if (arguments.length < 2) {\n              throw new TypeError(`Failed to execute 'removeApplicationEventListener' on '${this.constructor.name}': 2 arguments required, but only ${arguments.length} present.`);\n          }\n          if (typeof callback !== 'function' && typeof callback !== 'object') {\n              throw new TypeError(`Failed to execute 'removeApplicationEventListener' on '${this.constructor.name}': The callback provided as parameter 2 is not an object.`);\n          }\n          const listeners = this.applicationEventListeners.get(type) || [];\n          const removedListeners = listeners.filter(({ listener }) => listener !== callback);\n          this.applicationEventListeners.set(type, removedListeners);\n      }\n      dispatchApplicationEvent(event) {\n          // eventListeners の options 相当の実装はしない\n          if (!(event instanceof Event)) {\n              throw new TypeError(`Failed to execute 'dispatchApplicationEvent' on '${this.constructor.name}': parameter 1 is not of type 'Event'.`);\n          }\n          const type = event.type;\n          const listeners = this.applicationEventListeners.get(type);\n          if (listeners) {\n              listeners.forEach(({ listener, options }) => {\n                  listener.call(this, event);\n                  if (options && !options.once)\n                      return;\n                  this.removeApplicationEventListener(event.type, listener, options);\n              });\n          }\n      }\n  }\n\n  return LSConferenceIframe;\n\n})));\n","import { getDefaultMiddleware } from '@reduxjs/toolkit';\r\nconst middleware = [\r\n    ...getDefaultMiddleware({\r\n        serializableCheck: {\r\n            // immutable な state は main.immutable プロパティに押し込めて、serializable check を切る\r\n            ignoredPaths: [],\r\n            // action payload が MediaStream など immutable な場合は個別に action を ignore する\r\n            ignoredActions: [],\r\n        },\r\n        immutableCheck: {\r\n            // immutable な state は main.immutable プロパティに押し込めて、そこだけ immutable check を切る\r\n            ignoredPaths: [],\r\n        },\r\n    }),\r\n];\r\nexport default middleware;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nconst initialState = {};\r\nconst mainSlice = createSlice({\r\n    name: 'main',\r\n    initialState: initialState,\r\n    reducers: {},\r\n});\r\n// const { actions } = mainSlice;\r\n// export const {} = actions;\r\n// default で slice を export\r\nexport default mainSlice;\r\n"],"sourceRoot":""}